{
    "name": "ProbTrackX2",
    "command-line": "nipype_cmd nipype.interfaces.fsl ProbTrackX2 [ARGS] [AVOID_MP] [C_THRESH] [COLMASK4] [CORRECT_PATH_DISTRIBUTION] [DIST_THRESH] [DISTTHRESH1] [DISTTHRESH3] [ENVIRON] [FIBST] [FOPD] [FORCE_DIR] [FSAMPLES] [INV_XFM] [LOOP_CHECK] [LRTARGET3] [MASK] [MESHSPACE] [MOD_EULER] [N_SAMPLES] [N_STEPS] [NETWORK] [OMATRIX1] [OMATRIX2] [OMATRIX3] [OMATRIX4] [ONEWAYCONDITION] [OPD] [OS2T] [OUT_DIR] [OUTPUT_TYPE] [PHSAMPLES] [RAND_FIB] [RANDOM_SEED] [S2TASTEXT] [SAMPLE_RANDOM_POINTS] [SAMPLES_BASE_NAME] [SEED] [SEED_REF] [SIMPLE] [STEP_LENGTH] [STOP_MASK] [TARGET2] [TARGET3] [TARGET4] [TARGET_MASKS] [THSAMPLES] [USE_ANISOTROPY] [VERBOSE] [WAYCOND] [WAYORDER] [WAYPOINTS] [XFM]",
    "description": "ProbTrackX2, as implemented in Nipype (module: nipype.interfaces.fsl, interface: ProbTrackX2).",
    "inputs": [
        {
            "id": "args",
            "name": "Args",
            "type": "String",
            "value-key": "[ARGS]",
            "description": "A unicode string. Additional parameters to the command.",
            "optional": true
        },
        {
            "id": "avoid_mp",
            "name": "Avoid mp",
            "type": "File",
            "value-key": "[AVOID_MP]",
            "command-line-flag": "--avoid=",
            "description": "An existing file name. Reject pathways passing through locations given by this mask.",
            "optional": true
        },
        {
            "id": "c_thresh",
            "name": "C thresh",
            "type": "Number",
            "value-key": "[C_THRESH]",
            "command-line-flag": "--cthr=",
            "description": "A float. Curvature threshold - default=0.2.",
            "optional": true
        },
        {
            "id": "colmask4",
            "name": "Colmask4",
            "type": "File",
            "value-key": "[COLMASK4]",
            "command-line-flag": "--colmask4=",
            "description": "An existing file name. Mask for columns of matrix4 (default=seed mask).",
            "optional": true
        },
        {
            "id": "correct_path_distribution",
            "name": "Correct path distribution",
            "type": "Flag",
            "value-key": "[CORRECT_PATH_DISTRIBUTION]",
            "command-line-flag": "--pd",
            "description": "A boolean. Correct path distribution for the length of the pathways.",
            "optional": true
        },
        {
            "id": "dist_thresh",
            "name": "Dist thresh",
            "type": "Number",
            "value-key": "[DIST_THRESH]",
            "command-line-flag": "--distthresh=",
            "description": "A float. Discards samples shorter than this threshold (in mm - default=0).",
            "optional": true
        },
        {
            "id": "distthresh1",
            "name": "Distthresh1",
            "type": "Number",
            "value-key": "[DISTTHRESH1]",
            "command-line-flag": "--distthresh1=",
            "description": "A float. Discards samples (in matrix1) shorter than this threshold (in mm - default=0).",
            "optional": true
        },
        {
            "id": "distthresh3",
            "name": "Distthresh3",
            "type": "Number",
            "value-key": "[DISTTHRESH3]",
            "command-line-flag": "--distthresh3=",
            "description": "A float. Discards samples (in matrix3) shorter than this threshold (in mm - default=0).",
            "optional": true
        },
        {
            "id": "environ",
            "name": "Environ",
            "type": "String",
            "value-key": "[ENVIRON]",
            "description": "A dictionary with keys which are a bytes or none or a value of class 'str' and with values which are a bytes or none or a value of class 'str'. Environment variables.",
            "optional": true,
            "default-value": {}
        },
        {
            "id": "fibst",
            "name": "Fibst",
            "type": "Number",
            "integer": true,
            "value-key": "[FIBST]",
            "command-line-flag": "--fibst=",
            "description": "An integer (int or long). Force a starting fibre for tracking - default=1, i.e. first fibre orientation. only works if randfib==0.",
            "optional": true
        },
        {
            "id": "fopd",
            "name": "Fopd",
            "type": "File",
            "value-key": "[FOPD]",
            "command-line-flag": "--fopd=",
            "description": "An existing file name. Other mask for binning tract distribution.",
            "optional": true
        },
        {
            "id": "force_dir",
            "name": "Force dir",
            "type": "Flag",
            "value-key": "[FORCE_DIR]",
            "command-line-flag": "--forcedir",
            "description": "A boolean. Use the actual directory name given - i.e. do not add + to make a new directory.",
            "optional": true,
            "default-value": true
        },
        {
            "id": "fsamples",
            "name": "Fsamples",
            "type": "File",
            "list": true,
            "value-key": "[FSAMPLES]",
            "description": "A list of items which are an existing file name. No description provided.",
            "optional": false
        },
        {
            "id": "inv_xfm",
            "name": "Inv xfm",
            "type": "File",
            "value-key": "[INV_XFM]",
            "command-line-flag": "--invxfm=",
            "description": "A file name. Transformation matrix taking dti space to seed space (compulsory when using a warp_field for seeds_to_dti).",
            "optional": true
        },
        {
            "id": "loop_check",
            "name": "Loop check",
            "type": "Flag",
            "value-key": "[LOOP_CHECK]",
            "command-line-flag": "--loopcheck",
            "description": "A boolean. Perform loop_checks on paths - slower, but allows lower curvature threshold.",
            "optional": true
        },
        {
            "id": "lrtarget3",
            "name": "Lrtarget3",
            "type": "File",
            "value-key": "[LRTARGET3]",
            "command-line-flag": "--lrtarget3=",
            "description": "An existing file name. Column-space mask used for nxn connectivity matrix.",
            "optional": true
        },
        {
            "id": "mask",
            "name": "Mask",
            "type": "File",
            "value-key": "[MASK]",
            "command-line-flag": "-m",
            "description": "An existing file name. Bet binary mask file in diffusion space.",
            "optional": false
        },
        {
            "id": "meshspace",
            "name": "Meshspace",
            "type": "String",
            "value-key": "[MESHSPACE]",
            "command-line-flag": "--meshspace=",
            "description": "'caret' or 'freesurfer' or 'first' or 'vox'. Mesh reference space - either \"caret\" (default) or \"freesurfer\" or \"first\" or \"vox\".",
            "optional": true,
            "value-choices": [
                "caret",
                "freesurfer",
                "first",
                "vox"
            ]
        },
        {
            "id": "mod_euler",
            "name": "Mod euler",
            "type": "Flag",
            "value-key": "[MOD_EULER]",
            "command-line-flag": "--modeuler",
            "description": "A boolean. Use modified euler streamlining.",
            "optional": true
        },
        {
            "id": "n_samples",
            "name": "N samples",
            "type": "Number",
            "integer": true,
            "value-key": "[N_SAMPLES]",
            "command-line-flag": "--nsamples=",
            "description": "An integer (int or long). Number of samples - default=5000.",
            "optional": true,
            "default-value": 5000
        },
        {
            "id": "n_steps",
            "name": "N steps",
            "type": "Number",
            "integer": true,
            "value-key": "[N_STEPS]",
            "command-line-flag": "--nsteps=",
            "description": "An integer (int or long). Number of steps per sample - default=2000.",
            "optional": true
        },
        {
            "id": "network",
            "name": "Network",
            "type": "Flag",
            "value-key": "[NETWORK]",
            "command-line-flag": "--network",
            "description": "A boolean. Activate network mode - only keep paths going through at least one seed mask (required if multiple seed masks).",
            "optional": true
        },
        {
            "id": "omatrix1",
            "name": "Omatrix1",
            "type": "Flag",
            "value-key": "[OMATRIX1]",
            "command-line-flag": "--omatrix1",
            "description": "A boolean. Output matrix1 - seedtoseed connectivity.",
            "optional": true
        },
        {
            "id": "omatrix2",
            "name": "Omatrix2",
            "type": "Flag",
            "value-key": "[OMATRIX2]",
            "command-line-flag": "--omatrix2",
            "description": "A boolean. Output matrix2 - seedtolowresmask.",
            "optional": true
        },
        {
            "id": "omatrix3",
            "name": "Omatrix3",
            "type": "Flag",
            "value-key": "[OMATRIX3]",
            "command-line-flag": "--omatrix3",
            "description": "A boolean. Output matrix3 (nxn connectivity matrix).",
            "optional": true
        },
        {
            "id": "omatrix4",
            "name": "Omatrix4",
            "type": "Flag",
            "value-key": "[OMATRIX4]",
            "command-line-flag": "--omatrix4",
            "description": "A boolean. Output matrix4 - dtimasktoseed (special oxford sparse format).",
            "optional": true
        },
        {
            "id": "onewaycondition",
            "name": "Onewaycondition",
            "type": "Flag",
            "value-key": "[ONEWAYCONDITION]",
            "command-line-flag": "--onewaycondition",
            "description": "A boolean. Apply waypoint conditions to each half tract separately.",
            "optional": true
        },
        {
            "id": "opd",
            "name": "Opd",
            "type": "Flag",
            "value-key": "[OPD]",
            "command-line-flag": "--opd",
            "description": "A boolean. Outputs path distributions.",
            "optional": true,
            "default-value": true
        },
        {
            "id": "os2t",
            "name": "Os2t",
            "type": "Flag",
            "value-key": "[OS2T]",
            "command-line-flag": "--os2t",
            "description": "A boolean. Outputs seeds to targets.",
            "optional": true
        },
        {
            "id": "out_dir",
            "name": "Out dir",
            "type": "File",
            "value-key": "[OUT_DIR]",
            "command-line-flag": "--dir=",
            "description": "An existing directory name. Directory to put the final volumes in.",
            "optional": true
        },
        {
            "id": "output_type",
            "name": "Output type",
            "type": "String",
            "value-key": "[OUTPUT_TYPE]",
            "description": "'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.",
            "optional": true,
            "value-choices": [
                "NIFTI",
                "NIFTI_PAIR",
                "NIFTI_GZ",
                "NIFTI_PAIR_GZ"
            ]
        },
        {
            "id": "phsamples",
            "name": "Phsamples",
            "type": "File",
            "list": true,
            "value-key": "[PHSAMPLES]",
            "description": "A list of items which are an existing file name. No description provided.",
            "optional": false
        },
        {
            "id": "rand_fib",
            "name": "Rand fib",
            "type": "Number",
            "value-key": "[RAND_FIB]",
            "command-line-flag": "--randfib=",
            "description": "0 or 1 or 2 or 3. Options: 0 - default, 1 - to randomly sample initial fibres (with f > fibthresh), 2 - to sample in proportion fibres (with f>fibthresh) to f, 3 - to sample all populations at random (even if f<fibthresh).",
            "optional": true,
            "integer": true,
            "value-choices": [
                0,
                1,
                2,
                3
            ]
        },
        {
            "id": "random_seed",
            "name": "Random seed",
            "type": "Flag",
            "value-key": "[RANDOM_SEED]",
            "command-line-flag": "--rseed",
            "description": "A boolean. Random seed.",
            "optional": true
        },
        {
            "id": "s2tastext",
            "name": "S2tastext",
            "type": "Flag",
            "value-key": "[S2TASTEXT]",
            "command-line-flag": "--s2tastext",
            "description": "A boolean. Output seed-to-target counts as a text file (useful when seeding from a mesh).",
            "optional": true
        },
        {
            "id": "sample_random_points",
            "name": "Sample random points",
            "type": "Flag",
            "value-key": "[SAMPLE_RANDOM_POINTS]",
            "command-line-flag": "--sampvox",
            "description": "A boolean. Sample random points within seed voxels.",
            "optional": true
        },
        {
            "id": "samples_base_name",
            "name": "Samples base name",
            "type": "String",
            "value-key": "[SAMPLES_BASE_NAME]",
            "command-line-flag": "--samples=",
            "description": "A unicode string. The rootname/base_name for samples files.",
            "optional": true,
            "default-value": "merged"
        },
        {
            "id": "seed",
            "name": "Seed",
            "type": "File",
            "value-key": "[SEED]",
            "command-line-flag": "--seed=",
            "description": "An existing file name or a list of items which are an existing file name or a list of items which are a list of from 3 to 3 items which are an integer (int or long). Seed volume(s), or voxel(s) or freesurfer label file.",
            "optional": true
        },
        {
            "id": "seed_2",
            "name": "Seed",
            "type": "File",
            "list": true,
            "value-key": "[SEED]",
            "command-line-flag": "--seed=",
            "description": "An existing file name or a list of items which are an existing file name or a list of items which are a list of from 3 to 3 items which are an integer (int or long). Seed volume(s), or voxel(s) or freesurfer label file.",
            "optional": true
        },
        {
            "id": "seed_3",
            "name": "Seed",
            "type": "String",
            "list": true,
            "value-key": "[SEED]",
            "command-line-flag": "--seed=",
            "description": "An existing file name or a list of items which are an existing file name or a list of items which are a list of from 3 to 3 items which are an integer (int or long). Seed volume(s), or voxel(s) or freesurfer label file.",
            "optional": true
        },
        {
            "id": "seed_ref",
            "name": "Seed ref",
            "type": "File",
            "value-key": "[SEED_REF]",
            "command-line-flag": "--seedref=",
            "description": "An existing file name. Reference vol to define seed space in simple mode - diffusion space assumed if absent.",
            "optional": true
        },
        {
            "id": "simple",
            "name": "Simple",
            "type": "Flag",
            "value-key": "[SIMPLE]",
            "command-line-flag": "--simple",
            "description": "A boolean. Rack from a list of voxels (seed must be a ascii list of coordinates).",
            "optional": true
        },
        {
            "id": "step_length",
            "name": "Step length",
            "type": "Number",
            "value-key": "[STEP_LENGTH]",
            "command-line-flag": "--steplength=",
            "description": "A float. Step_length in mm - default=0.5.",
            "optional": true
        },
        {
            "id": "stop_mask",
            "name": "Stop mask",
            "type": "File",
            "value-key": "[STOP_MASK]",
            "command-line-flag": "--stop=",
            "description": "An existing file name. Stop tracking at locations given by this mask file.",
            "optional": true
        },
        {
            "id": "target2",
            "name": "Target2",
            "type": "File",
            "value-key": "[TARGET2]",
            "command-line-flag": "--target2=",
            "description": "An existing file name. Low resolution binary brain mask for storing connectivity distribution in matrix2 mode.",
            "optional": true
        },
        {
            "id": "target3",
            "name": "Target3",
            "type": "File",
            "value-key": "[TARGET3]",
            "command-line-flag": "--target3=",
            "description": "An existing file name. Mask used for nxn connectivity matrix (or nxn if lrtarget3 is set).",
            "optional": true
        },
        {
            "id": "target4",
            "name": "Target4",
            "type": "File",
            "value-key": "[TARGET4]",
            "command-line-flag": "--target4=",
            "description": "An existing file name. Brain mask in dti space.",
            "optional": true
        },
        {
            "id": "target_masks",
            "name": "Target masks",
            "type": "File",
            "list": true,
            "value-key": "[TARGET_MASKS]",
            "command-line-flag": "--targetmasks=",
            "description": "A list of items which are a file name. List of target masks - required for seeds_to_targets classification.",
            "optional": true
        },
        {
            "id": "thsamples",
            "name": "Thsamples",
            "type": "File",
            "list": true,
            "value-key": "[THSAMPLES]",
            "description": "A list of items which are an existing file name. No description provided.",
            "optional": false
        },
        {
            "id": "use_anisotropy",
            "name": "Use anisotropy",
            "type": "Flag",
            "value-key": "[USE_ANISOTROPY]",
            "command-line-flag": "--usef",
            "description": "A boolean. Use anisotropy to constrain tracking.",
            "optional": true
        },
        {
            "id": "verbose",
            "name": "Verbose",
            "type": "Number",
            "value-key": "[VERBOSE]",
            "command-line-flag": "--verbose=",
            "description": "0 or 1 or 2. Verbose level, [0-2]. level 2 is required to output particle files.",
            "optional": true,
            "integer": true,
            "value-choices": [
                0,
                1,
                2
            ]
        },
        {
            "id": "waycond",
            "name": "Waycond",
            "type": "String",
            "value-key": "[WAYCOND]",
            "command-line-flag": "--waycond=",
            "description": "'or' or 'and'. Waypoint condition. either \"and\" (default) or \"or\".",
            "optional": true,
            "value-choices": [
                "OR",
                "AND"
            ]
        },
        {
            "id": "wayorder",
            "name": "Wayorder",
            "type": "Flag",
            "value-key": "[WAYORDER]",
            "command-line-flag": "--wayorder",
            "description": "A boolean. Reject streamlines that do not hit waypoints in given order. only valid if waycond=and.",
            "optional": true
        },
        {
            "id": "waypoints",
            "name": "Waypoints",
            "type": "File",
            "value-key": "[WAYPOINTS]",
            "command-line-flag": "--waypoints=",
            "description": "An existing file name. Waypoint mask or ascii list of waypoint masks - only keep paths going through all the masks.",
            "optional": true
        },
        {
            "id": "xfm",
            "name": "Xfm",
            "type": "File",
            "value-key": "[XFM]",
            "command-line-flag": "--xfm=",
            "description": "An existing file name. Transformation matrix taking seed space to dti space (either flirt matrix or fnirt warp_field) - default is identity.",
            "optional": true
        }
    ],
    "output-files": [
        {
            "name": "Fdt paths",
            "id": "fdt_paths",
            "path-template": "fdt_paths.nii",
            "optional": true,
            "description": "A list of items which are an existing file name. Path/name of a 3d image file containing the output connectivity distribution to the seed mask."
        },
        {
            "name": "Log",
            "id": "log",
            "path-template": "probtrackx.log",
            "optional": true,
            "description": "An existing file name. Path/name of a text record of the command that was run."
        },
        {
            "name": "Lookup tractspace",
            "id": "lookup_tractspace",
            "path-template": "lookup_tractspace_fdt_matrix2.nii.gz",
            "optional": true,
            "description": "An existing file name. Lookup_tractspace generated by --omatrix2 option."
        },
        {
            "name": "Matrix1 dot",
            "id": "matrix1_dot",
            "path-template": "fdt_matrix1.dot",
            "optional": true,
            "description": "An existing file name. Output matrix1.dot - seedtoseed connectivity."
        },
        {
            "name": "Matrix2 dot",
            "id": "matrix2_dot",
            "path-template": "fdt_matrix2.dot",
            "optional": true,
            "description": "An existing file name. Output matrix2.dot - seedtolowresmask."
        },
        {
            "name": "Matrix3 dot",
            "id": "matrix3_dot",
            "path-template": "fdt_matrix3.dot",
            "optional": true,
            "description": "An existing file name. Output matrix3 - nxn connectivity matrix."
        },
        {
            "name": "Network matrix",
            "id": "network_matrix",
            "path-template": "matrix_seeds_to_all_targets",
            "optional": true,
            "description": "An existing file name. The network matrix generated by --omatrix1 option."
        },
        {
            "name": "Particle files",
            "id": "particle_files",
            "path-template": "*",
            "optional": true,
            "description": "A list of items which are an existing file name. Files describing all of the tract samples. generated only if verbose is set to 2."
        },
        {
            "name": "Targets",
            "id": "targets",
            "path-template": "targets",
            "optional": true,
            "description": "A list of items which are an existing file name. A list with all generated seeds_to_target files."
        },
        {
            "name": "Way total",
            "id": "way_total",
            "path-template": "waytotal",
            "optional": true,
            "description": "An existing file name. Path/name of a text file containing a single number corresponding to the total number of generated tracts that have not been rejected by inclusion/exclusion mask criteria."
        }
    ],
    "groups": [
        {
            "id": "seed_group",
            "name": "Seed group",
            "members": [
                "seed",
                "seed_2",
                "seed_3"
            ],
            "mutually-exclusive": true
        },
        {
            "id": "all_or_none_group",
            "name": "All or none group",
            "members": [
                "target2",
                "omatrix2"
            ],
            "all-or-none": true
        },
        {
            "id": "all_or_none_group_2",
            "name": "All or none group 2",
            "members": [
                "omatrix3",
                "target3",
                "lrtarget3"
            ],
            "all-or-none": true
        }
    ],
    "tool-version": "No version provided.",
    "schema-version": "0.5",
    "container-image": {
        "image": "mcin/docker-fsl:latest",
        "type": "docker",
        "index": "index.docker.io"
    }
}