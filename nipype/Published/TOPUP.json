{
    "author": "Nipype (interface), Oxford Centre for Functional MRI of the Brain (FMRIB) (tool)",
    "command-line": "topup [CONFIG] [ENCODING_FILE] [ESTMOV] [FWHM] [IN_FILE] [INTERP] [MAX_ITER] [MINMET] [NUMPREC] [OUT_BASE] [OUT_CORRECTED] [OUT_FIELD] [OUT_JAC_PREFIX] [OUT_LOGFILE] [OUT_MAT_PREFIX] [OUT_WARP_PREFIX] [REG_LAMBDA] [REGMOD] [REGRID] [SCALE] [SPLINEORDER] [SSQLAMBDA] [SUBSAMP] [WARP_RES]",
    "container-image": {
        "image": "mcin/docker-fsl:latest",
        "index": "index.docker.io",
        "type": "docker"
    },
    "description": "TOPUP, as implemented in Nipype (module: nipype.interfaces.fsl, interface: TOPUP).",
    "doi": "10.5281/zenodo.2621482",
    "inputs": [
        {
            "command-line-flag": "--config",
            "command-line-flag-separator": "=",
            "default-value": "b02b0.cnf",
            "description": "A string. Name of config file specifying command line arguments.",
            "id": "config",
            "name": "Config",
            "optional": true,
            "type": "String",
            "value-key": "[CONFIG]"
        },
        {
            "command-line-flag": "--datain",
            "command-line-flag-separator": "=",
            "description": "An existing file name. Name of text file with pe directions/times.",
            "id": "encoding_file",
            "name": "Encoding file",
            "optional": false,
            "type": "File",
            "value-key": "[ENCODING_FILE]"
        },
        {
            "command-line-flag": "--estmov",
            "command-line-flag-separator": "=",
            "description": "1 or 0. Estimate movements if set.",
            "id": "estmov",
            "integer": true,
            "name": "Estmov",
            "optional": true,
            "type": "Number",
            "value-choices": [
                1,
                0
            ],
            "value-key": "[ESTMOV]"
        },
        {
            "command-line-flag": "--fwhm",
            "command-line-flag-separator": "=",
            "description": "A float. Fwhm (in mm) of gaussian smoothing kernel.",
            "id": "fwhm",
            "name": "Fwhm",
            "optional": true,
            "type": "Number",
            "value-key": "[FWHM]"
        },
        {
            "command-line-flag": "--imain",
            "command-line-flag-separator": "=",
            "description": "An existing file name. Name of 4d file with images.",
            "id": "in_file",
            "name": "In file",
            "optional": false,
            "type": "File",
            "value-key": "[IN_FILE]"
        },
        {
            "command-line-flag": "--interp",
            "command-line-flag-separator": "=",
            "description": "'spline' or 'linear'. Image interpolation model, linear or spline.",
            "id": "interp",
            "name": "Interp",
            "optional": true,
            "type": "String",
            "value-choices": [
                "spline",
                "linear"
            ],
            "value-key": "[INTERP]"
        },
        {
            "command-line-flag": "--miter",
            "command-line-flag-separator": "=",
            "description": "An integer (int or long). Max # of non-linear iterations.",
            "id": "max_iter",
            "integer": true,
            "name": "Max iter",
            "optional": true,
            "type": "Number",
            "value-key": "[MAX_ITER]"
        },
        {
            "command-line-flag": "--minmet",
            "command-line-flag-separator": "=",
            "description": "0 or 1. Minimisation method 0=levenberg-marquardt, 1=scaled conjugate gradient.",
            "id": "minmet",
            "integer": true,
            "name": "Minmet",
            "optional": true,
            "type": "Number",
            "value-choices": [
                0,
                1
            ],
            "value-key": "[MINMET]"
        },
        {
            "command-line-flag": "--numprec",
            "command-line-flag-separator": "=",
            "description": "'double' or 'float'. Precision for representing hessian, double or float.",
            "id": "numprec",
            "name": "Numprec",
            "optional": true,
            "type": "String",
            "value-choices": [
                "double",
                "float"
            ],
            "value-key": "[NUMPREC]"
        },
        {
            "command-line-flag": "--jacout",
            "command-line-flag-separator": "=",
            "default-value": "jac",
            "description": "A unicode string. Prefix for the warpfield images.",
            "id": "out_jac_prefix",
            "name": "Out jac prefix",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_JAC_PREFIX]"
        },
        {
            "command-line-flag": "--rbmout",
            "command-line-flag-separator": "=",
            "default-value": "xfm",
            "description": "A unicode string. Prefix for the realignment matrices.",
            "id": "out_mat_prefix",
            "name": "Out mat prefix",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_MAT_PREFIX]"
        },
        {
            "command-line-flag": "--dfout",
            "command-line-flag-separator": "=",
            "default-value": "warpfield",
            "description": "A unicode string. Prefix for the warpfield images (in mm).",
            "id": "out_warp_prefix",
            "name": "Out warp prefix",
            "optional": true,
            "type": "String",
            "value-key": "[OUT_WARP_PREFIX]"
        },
        {
            "command-line-flag": "--lambda",
            "command-line-flag-separator": "=",
            "description": "A float. Weight of regularisation, default depending on --ssqlambda and --regmod switches.",
            "id": "reg_lambda",
            "name": "Reg lambda",
            "optional": true,
            "type": "Number",
            "value-key": "[REG_LAMBDA]"
        },
        {
            "command-line-flag": "--regmod",
            "command-line-flag-separator": "=",
            "description": "'bending_energy' or 'membrane_energy'. Regularisation term implementation. defaults to bending_energy. note that the two functions have vastly different scales. the membrane energy is based on the first derivatives and the bending energy on the second derivatives. the second derivatives will typically be much smaller than the first derivatives, so input lambda will have to be larger for bending_energy to yield approximately the same level of regularisation.",
            "id": "regmod",
            "name": "Regmod",
            "optional": true,
            "type": "String",
            "value-choices": [
                "bending_energy",
                "membrane_energy"
            ],
            "value-key": "[REGMOD]"
        },
        {
            "command-line-flag": "--regrid",
            "command-line-flag-separator": "=",
            "description": "1 or 0. If set (=1), the calculations are done in a different grid.",
            "id": "regrid",
            "integer": true,
            "name": "Regrid",
            "optional": true,
            "type": "Number",
            "value-choices": [
                1,
                0
            ],
            "value-key": "[REGRID]"
        },
        {
            "command-line-flag": "--scale",
            "command-line-flag-separator": "=",
            "description": "0 or 1. If set (=1), the images are individually scaled to a common mean.",
            "id": "scale",
            "integer": true,
            "name": "Scale",
            "optional": true,
            "type": "Number",
            "value-choices": [
                0,
                1
            ],
            "value-key": "[SCALE]"
        },
        {
            "command-line-flag": "--splineorder",
            "command-line-flag-separator": "=",
            "description": "An integer (int or long). Order of spline, 2->qadratic spline, 3->cubic spline.",
            "id": "splineorder",
            "integer": true,
            "name": "Splineorder",
            "optional": true,
            "type": "Number",
            "value-key": "[SPLINEORDER]"
        },
        {
            "command-line-flag": "--ssqlambda",
            "command-line-flag-separator": "=",
            "description": "1 or 0. Weight lambda by the current value of the ssd. if used (=1), the effective weight of regularisation term becomes higher for the initial iterations, therefore initial steps are a little smoother than they would without weighting. this reduces the risk of finding a local minimum.",
            "id": "ssqlambda",
            "integer": true,
            "name": "Ssqlambda",
            "optional": true,
            "type": "Number",
            "value-choices": [
                1,
                0
            ],
            "value-key": "[SSQLAMBDA]"
        },
        {
            "command-line-flag": "--subsamp",
            "command-line-flag-separator": "=",
            "description": "An integer (int or long). Sub-sampling scheme.",
            "id": "subsamp",
            "integer": true,
            "name": "Subsamp",
            "optional": true,
            "type": "Number",
            "value-key": "[SUBSAMP]"
        },
        {
            "command-line-flag": "--warpres",
            "command-line-flag-separator": "=",
            "description": "A float. (approximate) resolution (in mm) of warp basis for the different sub-sampling levels.",
            "id": "warp_res",
            "name": "Warp res",
            "optional": true,
            "type": "Number",
            "value-key": "[WARP_RES]"
        }
    ],
    "name": "TOPUP",
    "output-files": [
        {
            "command-line-flag": "--out",
            "command-line-flag-separator": "=",
            "description": "A file name. Base-name of output files (spline coefficients (hz) and movement parameters).",
            "id": "out_base",
            "name": "Out base",
            "optional": true,
            "path-template": "[IN_FILE]_base",
            "path-template-stripped-extensions": [
                ".nii.gz",
                ".nii"
            ],
            "value-key": "[OUT_BASE]"
        },
        {
            "command-line-flag": "--iout",
            "command-line-flag-separator": "=",
            "description": "A file name. Name of 4d image file with unwarped images.",
            "id": "out_corrected",
            "name": "Out corrected",
            "optional": true,
            "path-template": "[IN_FILE]_corrected",
            "path-template-stripped-extensions": [
                ".nii.gz",
                ".nii"
            ],
            "value-key": "[OUT_CORRECTED]"
        },
        {
            "description": "A file name. Encoding directions file output for applytopup.",
            "id": "out_enc_file",
            "name": "Out enc file",
            "optional": true,
            "path-template": "out_enc_file"
        },
        {
            "command-line-flag": "--fout",
            "command-line-flag-separator": "=",
            "description": "A file name. Name of image file with field (hz).",
            "id": "out_field",
            "name": "Out field",
            "optional": true,
            "path-template": "[IN_FILE]_field",
            "path-template-stripped-extensions": [
                ".nii.gz",
                ".nii"
            ],
            "value-key": "[OUT_FIELD]"
        },
        {
            "description": "An existing file name. File containing the field coefficients.",
            "id": "out_fieldcoef",
            "name": "Out fieldcoef",
            "optional": true,
            "path-template": "out_fieldcoef"
        },
        {
            "description": "A list of items which are an existing file name. Jacobian images.",
            "id": "out_jacs",
            "name": "Out jacs",
            "optional": true,
            "path-template": "out_jacs"
        },
        {
            "command-line-flag": "--logout",
            "command-line-flag-separator": "=",
            "description": "A file name. Name of log-file.",
            "id": "out_logfile",
            "name": "Out logfile",
            "optional": true,
            "path-template": "[IN_FILE]_topup.log",
            "path-template-stripped-extensions": [
                ".nii.gz",
                ".nii"
            ],
            "value-key": "[OUT_LOGFILE]"
        },
        {
            "description": "A list of items which are an existing file name. Realignment matrices.",
            "id": "out_mats",
            "name": "Out mats",
            "optional": true,
            "path-template": "out_mats"
        },
        {
            "description": "An existing file name. Movpar.txt output file.",
            "id": "out_movpar",
            "name": "Out movpar",
            "optional": true,
            "path-template": "out_movpar"
        },
        {
            "description": "A list of items which are an existing file name. Warpfield images.",
            "id": "out_warps",
            "name": "Out warps",
            "optional": true,
            "path-template": "out_warps"
        }
    ],
    "schema-version": "0.5",
    "tags": {
        "domain": [
            "neuroinformatics",
            "dmri"
        ],
        "source": "nipype-interface"
    },
    "tool-version": "1.0.0",
    "url": "https://github.com/nipy/nipype/blob/master/nipype/interfaces/fsl/epi.py"
}